import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY;

export const supabase = createClient(
  supabaseUrl || 'https://placeholder.supabase.co',
  supabaseAnonKey || 'placeholder_key'
);

// ÏÑúÎπÑÏä§ Î°§ ÌÇ§Î•º ÏÇ¨Ïö©ÌïòÎäî ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ (RLS Ïö∞Ìöå)
export const supabaseAdmin = supabaseServiceKey 
  ? createClient(supabaseUrl!, supabaseServiceKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    })
  : null;

// ÌôòÍ≤ΩÎ≥ÄÏàò ÌôïÏù∏ Ìï®Ïàò
export function checkEnvironmentVariables() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
  const supabaseServiceKey = process.env.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY;
  
  console.log('üîç ÌôòÍ≤ΩÎ≥ÄÏàò ÌôïÏù∏:');
  console.log('SUPABASE_URL:', supabaseUrl ? 'ÏÑ§Ï†ïÎê®' : 'ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå');
  console.log('SUPABASE_KEY:', supabaseKey ? 'ÏÑ§Ï†ïÎê®' : 'ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå');
  console.log('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? 'ÏÑ§Ï†ïÎê®' : 'ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå');
  
  const missingVars = [];
  if (!supabaseUrl) missingVars.push('SUPABASE_URL');
  if (!supabaseKey) missingVars.push('SUPABASE_KEY');
  
  if (missingVars.length > 0) {
    return {
      success: false,
      error: 'Supabase ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.',
      message: `Îã§Ïùå ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÎàÑÎùΩÎêòÏóàÏäµÎãàÎã§: ${missingVars.join(', ')}`,
      details: {
        supabaseUrl: supabaseUrl ? 'ÏÑ§Ï†ïÎê®' : 'ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå',
        supabaseKey: supabaseKey ? 'ÏÑ§Ï†ïÎê®' : 'ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå',
        supabaseServiceKey: supabaseServiceKey ? 'ÏÑ§Ï†ïÎê®' : 'ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå'
      },
      missingVariables: missingVars
    };
  }
  
  return {
    success: true,
    message: 'ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú ÏÑ§Ï†ïÎêòÏóàÏäµÎãàÎã§.',
    details: {
      supabaseUrl: 'ÏÑ§Ï†ïÎê®',
      supabaseKey: 'ÏÑ§Ï†ïÎê®',
      supabaseServiceKey: supabaseServiceKey ? 'ÏÑ§Ï†ïÎê®' : 'ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå'
    },
    hasServiceKey: !!supabaseServiceKey
  };
}

// Supabase Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
export async function testSupabaseConnection() {
  try {
    console.log('üîç Supabase Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÏãúÏûë...');
    console.log('üìã ÌôòÍ≤ΩÎ≥ÄÏàò ÏÉÅÌÉú:');
    console.log('- SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? 'ÏÑ§Ï†ïÎê®' : 'ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå');
    console.log('- SUPABASE_KEY:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? 'ÏÑ§Ï†ïÎê®' : 'ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå');
    console.log('- SUPABASE_SERVICE_ROLE_KEY:', process.env.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY ? 'ÏÑ§Ï†ïÎê®' : 'ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå');
    
    // 1. Í∏∞Î≥∏ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
    console.log('üîó Í∏∞Î≥∏ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ï§ë...');
    const { data, error } = await supabase.from('_dummy_table_').select('*').limit(1);
    
    console.log('üìä Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Í≤∞Í≥º:', { data, error });
    
    if (error) {
      console.log('‚ùå Ïó∞Í≤∞ Ïò§Î•ò Î∞úÏÉù:', error);
      
      // Ïò§Î•ò ÏΩîÎìúÎ≥Ñ ÏÉÅÏÑ∏ Î∂ÑÏÑù
      if (error.code === 'PGRST116') {
        // ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Í≤ÉÏùÄ Ï†ïÏÉÅ (Ïó∞Í≤∞ÏùÄ ÏÑ±Í≥µ)
        console.log('‚úÖ Supabase Ïó∞Í≤∞ ÏÑ±Í≥µ (ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Í≤ÉÏùÄ Ï†ïÏÉÅ)');
        return {
          success: true,
          message: 'Supabase Ïó∞Í≤∞Ïù¥ Ï†ïÏÉÅÏûÖÎãàÎã§.',
          details: 'ÌÖåÏù¥Î∏îÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Í≤ÉÏùÄ Ï†ïÏÉÅÏ†ÅÏù∏ ÏùëÎãµÏûÖÎãàÎã§.'
        };
      } else if (error.code === 'PGRST301') {
        return {
          success: false,
          error: 'Ïù∏Ï¶ù Ïã§Ìå® - API ÌÇ§Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
          details: error.message,
          code: error.code
        };
      } else if (error.code === 'PGRST302') {
        return {
          success: false,
          error: 'Í∂åÌïú ÏóÜÏùå - RLS Ï†ïÏ±ÖÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
          details: error.message,
          code: error.code
        };
      } else if (error.message.includes('fetch')) {
        return {
          success: false,
          error: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò - URLÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
          details: error.message,
          code: error.code
        };
      } else {
        return {
          success: false,
          error: `Ïó∞Í≤∞ Ïò§Î•ò: ${error.message}`,
          details: error.message,
          code: error.code
        };
      }
    }
    
    return {
      success: true,
      message: 'Supabase Ïó∞Í≤∞Ïù¥ Ï†ïÏÉÅÏûÖÎãàÎã§.',
      details: 'ÌÖåÏù¥Î∏î Ï°∞ÌöåÍ∞Ä ÏÑ±Í≥µÌñàÏäµÎãàÎã§.'
    };
    
  } catch (error) {
    console.error('‚ùå Supabase Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ï§ë ÏòàÏô∏ Î∞úÏÉù:', error);
    
    // ÏòàÏô∏ ÌÉÄÏûÖÎ≥Ñ Î∂ÑÏÑù
    if (error instanceof TypeError && error.message.includes('fetch')) {
      return {
        success: false,
        error: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò - URLÏù¥ Ïò¨Î∞îÎ•∏ÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
        details: error.message,
        type: 'NetworkError'
      };
    } else if (error instanceof Error) {
      return {
        success: false,
        error: `Ïó∞Í≤∞ Ïò§Î•ò: ${error.message}`,
        details: error.message,
        type: 'Error'
      };
    } else {
      return {
        success: false,
        error: 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
        details: String(error),
        type: 'Unknown'
      };
    }
  }
}

// Storage Î≤ÑÌÇ∑ ÏÉùÏÑ± (ÏÑúÎπÑÏä§ Î°§ ÌÇ§ ÏÇ¨Ïö©)
export async function createStorageBucket(bucketName: string = 'images') {
  try {
    console.log(`üîß Storage Î≤ÑÌÇ∑ ÏÉùÏÑ±: ${bucketName}`);
    
    // ÏÑúÎπÑÏä§ Î°§ ÌÇ§Í∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ ÏùºÎ∞ò ÌÇ§ ÏÇ¨Ïö©
    const client = supabaseAdmin || supabase;
    
    const { data, error } = await client.storage.createBucket(bucketName, {
      public: true,
      allowedMimeTypes: ['image/*'],
      fileSizeLimit: 52428800 // 50MB
    });
    
    if (error) {
      // Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Í≤ΩÏö∞
      if (error.message.includes('already exists')) {
        console.log(`‚úÖ ${bucketName} Î≤ÑÌÇ∑Ïù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§.`);
        return {
          success: true,
          message: `${bucketName} Î≤ÑÌÇ∑Ïù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§.`,
          bucketExists: true
        };
      }
      throw error;
    }
    
    console.log(`‚úÖ ${bucketName} Î≤ÑÌÇ∑ ÏÉùÏÑ± ÏÑ±Í≥µ:`, data);
    
    return {
      success: true,
      message: `${bucketName} Î≤ÑÌÇ∑Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.`,
      bucketExists: true,
      data
    };
    
  } catch (error) {
    console.error(`‚ùå Storage Î≤ÑÌÇ∑ ÏÉùÏÑ± Ïã§Ìå®:`, error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'
    };
  }
}

// Storage Î≤ÑÌÇ∑ ÌôïÏù∏
export async function checkStorageBucket(bucketName: string = 'images') {
  try {
    console.log(`üîç Storage Î≤ÑÌÇ∑ ÌôïÏù∏: ${bucketName}`);
    
    const { data, error } = await supabase.storage.listBuckets();
    
    if (error) {
      throw error;
    }
    
    const bucketExists = data.some(bucket => bucket.name === bucketName);
    
    console.log('üìã ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î≤ÑÌÇ∑:', data.map(b => b.name));
    console.log(`${bucketName} Î≤ÑÌÇ∑ Ï°¥Ïû¨:`, bucketExists);
    
    return {
      success: true,
      bucketExists,
      availableBuckets: data.map(b => b.name),
      message: bucketExists 
        ? `${bucketName} Î≤ÑÌÇ∑Ïù¥ Ï°¥Ïû¨Ìï©ÎãàÎã§.`
        : `${bucketName} Î≤ÑÌÇ∑Ïù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.`
    };
    
  } catch (error) {
    console.error('‚ùå Storage Î≤ÑÌÇ∑ ÌôïÏù∏ Ïã§Ìå®:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'
    };
  }
}

// Î™®Îì† Storage Î≤ÑÌÇ∑ÏóêÏÑú Ïù¥ÎØ∏ÏßÄ Ï∞æÍ∏∞
export async function findImagesInAllBuckets() {
  try {
    console.log('üîç Î™®Îì† Storage Î≤ÑÌÇ∑ÏóêÏÑú Ïù¥ÎØ∏ÏßÄ Í≤ÄÏÉâ...');
    
    // 1. Î™®Îì† Î≤ÑÌÇ∑ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      throw bucketsError;
    }
    
    console.log('üìã ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î≤ÑÌÇ∑:', buckets.map(b => b.name));
    
    if (buckets.length === 0) {
      return {
        success: true,
        totalBuckets: 0,
        availableBuckets: [],
        totalImages: 0,
        images: [],
        message: 'Storage Î≤ÑÌÇ∑Ïù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§. Î®ºÏ†Ä Î≤ÑÌÇ∑ÏùÑ ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.'
      };
    }
    
    const allImages = [];
    
    // 2. Í∞Å Î≤ÑÌÇ∑ÏóêÏÑú Ïù¥ÎØ∏ÏßÄ Í≤ÄÏÉâ
    for (const bucket of buckets) {
      try {
        console.log(`üîç ${bucket.name} Î≤ÑÌÇ∑ÏóêÏÑú Ïù¥ÎØ∏ÏßÄ Í≤ÄÏÉâ Ï§ë...`);
        
        const { data: files, error: filesError } = await supabase.storage
          .from(bucket.name)
          .list('', {
            limit: 100,
            offset: 0,
            sortBy: { column: 'name', order: 'asc' }
          });
        
        if (filesError) {
          console.log(`‚ö†Ô∏è ${bucket.name} Î≤ÑÌÇ∑ Ï†ëÍ∑º Ïò§Î•ò:`, filesError);
          continue;
        }
        
        // Ïù¥ÎØ∏ÏßÄ ÌååÏùºÎßå ÌïÑÌÑ∞ÎßÅ
        const imageFiles = files.filter(file => {
          const ext = file.name.toLowerCase().split('.').pop();
          return ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'].includes(ext || '');
        });
        
        // Í∞Å Ïù¥ÎØ∏ÏßÄÏùò Í≥µÍ∞ú URL ÏÉùÏÑ±
        const imagesWithUrls = imageFiles.map(file => {
          const { data: { publicUrl } } = supabase.storage
            .from(bucket.name)
            .getPublicUrl(file.name);
          
          return {
            bucketName: bucket.name,
            name: file.name,
            size: file.metadata?.size || 0,
            lastModified: file.updated_at,
            url: publicUrl,
            path: file.name
          };
        });
        
        allImages.push(...imagesWithUrls);
        console.log(`‚úÖ ${bucket.name} Î≤ÑÌÇ∑ÏóêÏÑú ${imagesWithUrls.length}Í∞ú Ïù¥ÎØ∏ÏßÄ Î∞úÍ≤¨`);
        
      } catch (bucketError) {
        console.log(`‚ùå ${bucket.name} Î≤ÑÌÇ∑ Ï≤òÎ¶¨ Ïò§Î•ò:`, bucketError);
      }
    }
    
    console.log(`üñºÔ∏è Ï¥ù ${allImages.length}Í∞úÏùò Ïù¥ÎØ∏ÏßÄ Î∞úÍ≤¨`);
    
    return {
      success: true,
      totalBuckets: buckets.length,
      availableBuckets: buckets.map(b => b.name),
      totalImages: allImages.length,
      images: allImages,
      message: `${buckets.length}Í∞ú Î≤ÑÌÇ∑ÏóêÏÑú Ï¥ù ${allImages.length}Í∞úÏùò Ïù¥ÎØ∏ÏßÄÎ•º Ï∞æÏïòÏäµÎãàÎã§.`
    };
    
  } catch (error) {
    console.error('‚ùå Î™®Îì† Î≤ÑÌÇ∑ÏóêÏÑú Ïù¥ÎØ∏ÏßÄ Í≤ÄÏÉâ Ïã§Ìå®:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'
    };
  }
}

// StorageÏóêÏÑú Ïù¥ÎØ∏ÏßÄ Î™©Î°ù Ï°∞Ìöå (ÌäπÏ†ï Î≤ÑÌÇ∑)
export async function listStorageImages(bucketName: string = 'images') {
  try {
    console.log(`üîç Storage Ïù¥ÎØ∏ÏßÄ Î™©Î°ù Ï°∞Ìöå: ${bucketName}`);
    
    const { data, error } = await supabase.storage
      .from(bucketName)
      .list('', {
        limit: 100,
        offset: 0,
        sortBy: { column: 'name', order: 'asc' }
      });
    
    if (error) {
      throw error;
    }
    
    console.log(`üìã ${bucketName} Î≤ÑÌÇ∑Ïùò ÌååÏùº Î™©Î°ù:`, data);
    
    // Ïù¥ÎØ∏ÏßÄ ÌååÏùºÎßå ÌïÑÌÑ∞ÎßÅ (ÌôïÏû•Ïûê Í∏∞Ï§Ä)
    const imageFiles = data.filter(file => {
      const ext = file.name.toLowerCase().split('.').pop();
      return ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'].includes(ext || '');
    });
    
    // Í∞Å Ïù¥ÎØ∏ÏßÄÏùò Í≥µÍ∞ú URL ÏÉùÏÑ±
    const imagesWithUrls = imageFiles.map(file => {
      const { data: { publicUrl } } = supabase.storage
        .from(bucketName)
        .getPublicUrl(file.name);
      
      return {
        name: file.name,
        size: file.metadata?.size || 0,
        lastModified: file.updated_at,
        url: publicUrl,
        path: file.name
      };
    });
    
    console.log(`üñºÔ∏è Ïù¥ÎØ∏ÏßÄ ÌååÏùº ${imagesWithUrls.length}Í∞ú Î∞úÍ≤¨`);
    
    return {
      success: true,
      bucketName,
      totalFiles: data.length,
      imageFiles: imagesWithUrls.length,
      images: imagesWithUrls,
      message: `${bucketName} Î≤ÑÌÇ∑ÏóêÏÑú ${imagesWithUrls.length}Í∞úÏùò Ïù¥ÎØ∏ÏßÄÎ•º Ï∞æÏïòÏäµÎãàÎã§.`
    };
    
  } catch (error) {
    console.error('‚ùå Storage Ïù¥ÎØ∏ÏßÄ Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'
    };
  }
}

// Í∞ÑÎã®Ìïú ÌååÏùº ÏóÖÎ°úÎìú ÌÖåÏä§Ìä∏
export async function testFileUpload() {
  try {
    console.log('üîç ÌååÏùº ÏóÖÎ°úÎìú ÌÖåÏä§Ìä∏ ÏãúÏûë...');
    
    // Î®ºÏ†Ä ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î≤ÑÌÇ∑ ÌôïÏù∏
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      throw bucketsError;
    }
    
    // Ï≤´ Î≤àÏß∏ Î≤ÑÌÇ∑ ÏÇ¨Ïö© (ÎòêÎäî 'images' Î≤ÑÌÇ∑Ïù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©)
    const targetBucket = buckets.find(b => b.name === 'images') || buckets[0];
    
    if (!targetBucket) {
      throw new Error('ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î≤ÑÌÇ∑Ïù¥ ÏóÜÏäµÎãàÎã§.');
    }
    
    console.log(`üì§ ${targetBucket.name} Î≤ÑÌÇ∑Ïóê ÌÖåÏä§Ìä∏ ÌååÏùº ÏóÖÎ°úÎìú...`);
    
    // Í∞ÑÎã®Ìïú ÌÖçÏä§Ìä∏ ÌååÏùº ÏÉùÏÑ±
    const testContent = 'This is a test file for upload testing.';
    const testFile = new File([testContent], 'test.txt', { type: 'text/plain' });
    
    const { data, error } = await supabase.storage
      .from(targetBucket.name)
      .upload(`test-${Date.now()}.txt`, testFile);
    
    if (error) {
      throw error;
    }
    
    console.log('‚úÖ ÌååÏùº ÏóÖÎ°úÎìú ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ:', data);
    
    // ÏóÖÎ°úÎìúÎêú ÌååÏùº ÏÇ≠Ï†ú
    await supabase.storage
      .from(targetBucket.name)
      .remove([data.path]);
    
    console.log('üóëÔ∏è ÌÖåÏä§Ìä∏ ÌååÏùº ÏÇ≠Ï†ú ÏôÑÎ£å');
    
    return {
      success: true,
      message: `ÌååÏùº ÏóÖÎ°úÎìú ÌÖåÏä§Ìä∏Í∞Ä ÏÑ±Í≥µÌñàÏäµÎãàÎã§. (${targetBucket.name} Î≤ÑÌÇ∑ ÏÇ¨Ïö©)`,
      data
    };
    
  } catch (error) {
    console.error('‚ùå ÌååÏùº ÏóÖÎ°úÎìú ÌÖåÏä§Ìä∏ Ïã§Ìå®:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'
    };
  }
}

// Supabase Storage Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
export async function testStorageConnection() {
  try {
    console.log('üîç Supabase Storage Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÏãúÏûë...');
    
    // 1. Storage Î≤ÑÌÇ∑ Î™©Î°ù Ï°∞Ìöå ÌÖåÏä§Ìä∏
    console.log('üì¶ Storage Î≤ÑÌÇ∑ Î™©Î°ù Ï°∞Ìöå Ï§ë...');
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    console.log('üìä Storage ÌÖåÏä§Ìä∏ Í≤∞Í≥º:', { buckets, bucketsError });
    
    if (bucketsError) {
      console.log('‚ùå Storage Ïó∞Í≤∞ Ïò§Î•ò:', bucketsError);
      
      if (bucketsError.message.includes('JWT')) {
        return {
          success: false,
          error: 'Storage Ïù∏Ï¶ù Ïã§Ìå® - API ÌÇ§Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
          details: bucketsError.message,
          code: bucketsError.statusCode
        };
      } else if (bucketsError.message.includes('fetch')) {
        return {
          success: false,
          error: 'Storage ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò - URLÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
          details: bucketsError.message,
          code: bucketsError.statusCode
        };
      } else {
        return {
          success: false,
          error: `Storage Ïó∞Í≤∞ Ïò§Î•ò: ${bucketsError.message}`,
          details: bucketsError.message,
          code: bucketsError.statusCode
        };
      }
    }
    
    console.log('‚úÖ Storage Ïó∞Í≤∞ ÏÑ±Í≥µ');
    console.log('üìã ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î≤ÑÌÇ∑:', buckets?.map(b => b.name) || []);
    
    return {
      success: true,
      message: 'Supabase Storage Ïó∞Í≤∞Ïù¥ Ï†ïÏÉÅÏûÖÎãàÎã§.',
      details: `${buckets?.length || 0}Í∞úÏùò Î≤ÑÌÇ∑Ïù¥ ÏûàÏäµÎãàÎã§.`,
      buckets: buckets?.map(b => b.name) || []
    };
    
  } catch (error) {
    console.error('‚ùå Storage Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ï§ë ÏòàÏô∏ Î∞úÏÉù:', error);
    
    if (error instanceof TypeError && error.message.includes('fetch')) {
      return {
        success: false,
        error: 'Storage ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò - URLÏù¥ Ïò¨Î∞îÎ•∏ÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
        details: error.message,
        type: 'NetworkError'
      };
    } else if (error instanceof Error) {
      return {
        success: false,
        error: `Storage Ïó∞Í≤∞ Ïò§Î•ò: ${error.message}`,
        details: error.message,
        type: 'Error'
      };
    } else {
      return {
        success: false,
        error: 'Storage Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
        details: String(error),
        type: 'Unknown'
      };
    }
  }
} 